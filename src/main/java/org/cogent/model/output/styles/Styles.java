package org.cogent.model.output.styles;

import org.cogent.model.output.StyleConfig ;
import org.cogent.model.output.StyleConfig.IndentationConfig ;
import org.cogent.model.output.StyleConfig.WhitespaceExpression ;

import static org.cogent.model.output.StyleConfig.* ;
import static org.cogent.model.output.StyleConfig.LineWrappingPolicy.* ;
import static org.cogent.model.output.StyleConfig.IndentationPolicy.* ;
import static org.cogent.model.output.StyleConfig.WrapOperatorPolicy.* ;

public final class Styles {

	public static final StyleConfig java ;
	public static final StyleConfig bill ;
	public static final StyleConfig defaultStyle ;

	static {
		java = StyleConfig.builder ( )
				.indentation ( IndentationConfig.builder ( )
						.type ( IndentationType.Tabs )
						.useSpacesToIndentWrappedLines ( false )
						.indentationSpacesCount ( 4 )
						.tabSize ( 8 )
						.textBlockIndentation ( TextBlockIndentation.DefaultForWrappedLines )
						.indentationElements ( IndentationElements.builder ( )
								.declarationWithinClassBody ( true )
								.declarationWithinEnumDeclaration ( true )
								.declarationWithinEnumConstants ( true )
								.declarationWithinAnnotationDeclaration ( true )
								.declarationWithinRecordDeclaration ( true )
								.statementWithinConstructorBody ( true )
								.statementWithinMethodBody ( true )
								.statementWithinBlock ( true )
								.breakWithinSwitchBody ( true )
								.statementWithinCaseBody ( true )
								.breakWithinSwitchBody ( true )
								.emptyLines ( false )
								.build ( ) )
						.alignmentInColumns ( AlignmentInColumns.builder ( )
								.fieldDeclarations ( false )
								.variableDeclarations ( false )
								.assignmentStatements ( false )
								.useSpacesForAlign ( false )
								.blankLinesSeparatingIndependentGroups ( 1 )
								.build ( ) )
						.build ( ) )
				.bracePosition ( BracePosition.builder ( )
						.classOrInterfaceDeclaration ( BracePositionValue.SameLine )
						.anonymousClassDeclaration ( BracePositionValue.SameLine )
						.constructorDeclaration ( BracePositionValue.SameLine )
						.methodDeclaration ( BracePositionValue.SameLine )
						.enumDeclaration ( BracePositionValue.SameLine )
						.enumConstantBody ( BracePositionValue.SameLine )
						.recordDeclaration ( BracePositionValue.SameLine )
						.recordConstructor ( BracePositionValue.SameLine )
						.annotationTypeDeclaration ( BracePositionValue.SameLine )
						.block ( BracePositionValue.SameLine )
						.blockInCaseStatement ( BracePositionValue.SameLine )
						.switchExpression ( BracePositionValue.SameLine )
						.switchStatement ( BracePositionValue.SameLine )
						.arrayExpression ( BracePositionValue.SameLine )
						.keepEmptyArrayInitializerOnOneLine ( false )
						.lambdaBody ( BracePositionValue.SameLine )
						.build ( ) )
				.parenthesesPosition ( ParenthesesPosition.builder ( )
						.methodDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.methodInvocation ( ParenthesesPositionValue.SameLineAsContent )
						.enumConstantDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.recordDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.annotation ( ParenthesesPositionValue.SameLineAsContent )
						.lambdaDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.ifStatement ( ParenthesesPositionValue.SameLineAsContent )
						.whileStatement ( ParenthesesPositionValue.SameLineAsContent )
						.doWhileStatement ( ParenthesesPositionValue.SameLineAsContent )
						.forStatement ( ParenthesesPositionValue.SameLineAsContent )
						.switchStatement ( ParenthesesPositionValue.SameLineAsContent )
						.tryClause ( ParenthesesPositionValue.SameLineAsContent )
						.catchClause ( ParenthesesPositionValue.SameLineAsContent )
						.build ( ) )
				.whitespace ( Whitespace.builder ( )
						.declaration ( WhitespaceDeclaration.builder ( )
								.classSpace ( ClassSpace.builder ( )
										.beforeOpeningBraceNamedClass ( true )
										.beforeOpeningBraceAnonymousClass ( true )
										.beforeCommaImplementsClause ( false )
										.afterCommaImplementsClause ( true )
										.beforeCommaPermitsClause ( false )
										.afterCommaPermitsClause ( true )
										.build ( ) )
								.fieldSpace ( FieldSpace.builder ( )
										.beforeCommaMultipleFields ( false )
										.afterCommaMultipleFields ( true )
										.build ( ) )
								.localVariableSpace ( LocalVariableSpace.builder ( )
										.beforeCommaMultipleFields ( false )
										.afterCommaMultipleFields ( true )
										.build ( ) )
								.constructorSpace ( ConstructorSpace.builder ( )
										.beforeOpeningParenthesis ( false )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.betweenEmptyParenthesis ( false )
										.beforeOpeningBrace ( true )
										.beforeCommaInParameters ( false )
										.afterCommaInParameters ( true )
										.beforeCommaInThrows ( false )
										.afterCommaInThrows ( true )
										.build ( ) )
								.methodSpace ( MethodSpace.builder ( )
										.beforeOpeningParenthesis ( false )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.betweenEmptyParenthesis ( false )
										.beforeOpeningBrace ( true )
										.beforeCommaInParameters ( false )
										.afterCommaInParameters ( true )
										.beforeEllipsesInVarargs ( false )
										.afterEllipsesInVarargs ( true )
										.beforeCommaInThrows ( false )
										.afterCommaInThrows ( true )
										.build ( ) )
								.labelSpace ( LabelSpace.builder ( )
										.beforeColon ( false )
										.afterColon ( true )
										.build ( ) )
								.annotationSpace ( AnnotationSpace.builder ( )
										.afterAt ( false )
										.beforeOpeningParenthesis ( false )
										.afterOpeningParenthesis ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.enumSpace ( EnumSpace.builder ( )
										.beforeOpeningBraceInDeclaration ( true )
										.beforeCommaBetweenConstants ( false )
										.afterCommaBetweenConstants ( true )
										.beforeOpeningParenthesisInConstantArguments ( false )
										.afterOpeningParenthesisInConstantArguments ( false )
										.betweenEmptyParenthesisInConstantArguments ( false )
										.beforeCommaInConstantArguments ( false )
										.afterCommaBetweenConstants ( true )
										.beforeClosingParenthesisInConstantArguments ( false )
										.beforeOpeningBraceOfConstantBody ( true )
										.build ( ) )
								.annotationTypeSpace ( AnnotationTypeSpace.builder ( )
										.beforeAt ( true )
										.afterAt ( false )
										.beforeOpeningBrace ( true )
										.beforeOpeningParenthesisInAnnotationTypeMembers ( false )
										.betweenParenthesisInAnnotationTypeMembers ( false )
										.build ( ) )
								.recordSpace ( RecordSpace.builder ( )
										.beforeOpeningParenthesis ( false )
										.afterOpeningParenthesis ( false )
										.beforeCommaInRecordComponents ( false )
										.afterCommaInRecordComponents ( true )
										.beforeClosingParenthesis ( false )
										.beforeOpeningBraceInDeclaration ( true )
										.beforeOpeningBraceInRecordConstructor ( true )
										.build ( ) )
								.lambdaSpace ( LambdaSpace.builder ( )
										.beforeArrowOperator ( true )
										.afterArrowOperator ( true )
										.build ( ) )
								.build ( ) )
						.controlStatement ( WhitespaceControlStatement.builder ( )
								.blockStatement ( WhitespaceBlockStatement.builder ( )
										.beforeOpeningBrace ( true )
										.afterClosingBrace ( true )
										.build ( ) )
								.ifElseStatement ( WhitespaceIfElseStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.forStatement ( WhitespaceForStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.beforeCommaInInitialization ( false )
										.afterCommaInInitialization ( true )
										.beforeCommaInIncrements ( false )
										.afterCommaInIncrements ( true )
										.beforeSemicolon ( false )
										.afterSemicolon ( true )
										.beforeColon ( true )
										.afterColon ( true )
										.build ( ) )
								.switchStatement ( WhitespaceSwitchStatement.builder ( )
										.beforeColonInCase ( false )
										.beforeColonInDefault ( false )
										.beforeArrowInCase ( true )
										.afterArrowInCase ( true )
										.beforeArrowInDefault ( true )
										.afterArrowInDefault ( true )
										.beforeCommaInCaseExpressions ( false )
										.afterCommaInCaseExpressions ( true )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.beforeOpeningBrace ( true )
										.build ( ) )
								.whileStatement ( WhitespaceWhileStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.doWhileStatement ( WhitespaceDoWhileStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.synchronizedStatement ( WhitespaceSynchronizedStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.tryWithResourcesClause ( WhitespaceTryWithResourcesClause.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeSemicolon ( false )
										.afterSemicolon ( true )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.catchClause ( WhitespaceCatchClause.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.assertStatement ( WhitespaceAssertStatement.builder ( )
										.beforeColon ( true )
										.afterColon ( true )
										.build ( ) )
								.returnStatement ( WhitespaceReturnStatement.builder ( )
										.beforeParenthesizedExpressions ( true )
										.build ( ) )
								.throwStatement ( WhitespaceThrowStatement.builder ( )
										.beforeParenthesizedExpressions ( true )
										.build ( ) )
								.beforeSemicolon ( false )
								.build ( ) )
						.expression ( WhitespaceExpression.builder ( )
								.functionInvocation ( WhitespaceFunctionInvocation.builder ( )
										.beforeOpeningParenthesis ( false )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.betweenEmptyParentheses ( false )
										.beforeCommaInMethodArguments ( false )
										.afterCommaInMethodArguments ( true )
										.beforeCommaInObjectAllocationArguments ( false )
										.afterCommaInObjectAllocationArguments ( true )
										.beforeCommaInExplicitConstructorCall ( true )
										.afterCommaInExplicitConstructorCall ( true )
										.build ( ) )
								.unaryOperator ( WhitespaceUnaryOperator.builder ( )
										.beforePostfixOperator ( false )
										.afterPostfixOperator ( false )
										.beforePrefixOperator ( false )
										.afterPrefixOperator ( false )
										.beforeUnaryOperator ( false )
										.afterUnaryOperator ( false )
										.afterLogicalNotOperator ( false )
										.build ( ) )
								.binaryOperator ( WhitespaceBinaryOperator.builder ( )
										.beforeMultiplicativeOperator ( true )
										.afterMultiplicativeOperator ( true )
										.beforeAdditiveOperator ( true )
										.afterAdditiveOperator ( true )
										.beforeStringConcatenationOperator ( true )
										.afterStringConcatenationOperator ( true )
										.beforeShiftOperator ( true )
										.afterShiftOperator ( true )
										.beforeRelationalOperator ( true )
										.afterRelationalOperator ( true )
										.beforeBitwiseOperator ( true )
										.afterBitwiseOperator ( true )
										.beforeLogicalOperator ( true )
										.afterLogicalOperator ( true )
										.build ( ) )
								.conditionalOperator ( WhitespaceConditionalOperator.builder ( )
										.beforeQuestionMark ( true )
										.afterQuestionMark ( true )
										.beforeColon ( true )
										.afterColon ( true )
										.build ( ) )
								.assignmentOperator ( WhitespaceAssignmentOperator.builder ( )
										.beforeAssignmentOperator ( true )
										.afterAssignmentOperator ( true )
										.build ( ) )
								.parenthesizedExpression ( WhitespaceParenthesizedExpression.builder ( )
										.beforeOpeningParenthesis ( false )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.build ( ) )
								.typeCast ( WhitespaceTypeCast.builder ( )
										.afterOpeningParenthesis ( false )
										.beforeClosingParenthesis ( false )
										.afterClosingParenthesis ( true )
										.build ( ) )
								.build ( ) )
						.array ( WhitespaceArray.builder ( )
								.declaration ( WhitespaceArrayDeclaration.builder ( )
										.beforeOpeningBracket ( false )
										.betweenEmptyBrackets ( false )
										.build ( ) )
								.allocation ( WhitespaceArrayAllocation.builder ( )
										.beforeOpeningBracket ( false )
										.afterOpeningBracket ( false )
										.beforeClosingBracket ( false )
										.afterClosingBracket ( false )
										.build ( ) )
								.initializer ( WhitespaceArrayInitializer.builder ( )
										.beforeOpeningBrace ( true )
										.afterOpeningBrace ( true )
										.beforeClosingBrace ( true )
										.beforeComma ( false )
										.afterComma ( true )
										.betweenEmptyBraces ( false )
										.build ( ) )
								.access ( WhitespaceArrayAccess.builder ( )
										.beforeOpeningBracket ( false )
										.afterOpeningBracket ( false )
										.beforeClosingBracket ( false )
										.build ( ) )
								.build ( ) )
						.parameterizedType ( WhitespaceParameterizedType.builder ( )
								.reference ( WhitespaceParameterizedTypeReference.builder ( )
										.beforeOpeningAngleBracket ( false )
										.afterOpeningAngleBracket ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingAngleBracket ( false )
										.build ( ) )
								.arguments ( WhitespaceParameterizedTypeArguments.builder ( )
										.beforeOpeningAngleBracket ( false )
										.afterOpeningAngleBracket ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingAngleBracket ( false )
										.afterClosingAngleBracket ( false )
										.build ( ) )
								.parameters ( WhitespaceParameterizedTypeParameters.builder ( )
										.beforeOpeningAngleBracket ( false )
										.afterOpeningAngleBracket ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingAngleBracket ( false )
										.afterClosingAngleBracket ( false )
										.beforeAndInTypeBounds ( true )
										.afterAndInTypeBounds ( true )
										.build ( ) )
								.wildcard ( WhitespaceParameterizedTypeWildcard.builder ( )
										.beforeQuestionMark ( false )
										.afterQuestionMark ( false )
										.build ( ) )
								.build ( ) )
						.build ( ) )
				.blankLines ( BlankLines.builder ( )
						.numberOfEmptyLinesToPreserve ( 1 )
						.withinCompilationUnit ( BlankLinesWithinCompilationUnit.builder ( )
								.beforePackage ( 0 )
								.afterPackage ( 1 )
								.beforeImports ( 1 )
								.betweenImportGroups ( 1 )
								.afterImports ( 1 )
								.betweenClassDeclarations ( 1 )
								.build ( ) )
						.withinTypeDeclarations ( BlankLinesWithinTypeDeclarations.builder ( )
								.beforeFirstMemberDeclaration ( 0 )
								.afterLastMemberDeclaration ( 0 )
								.betweenMembersDeclarationsOfDifferentKinds ( 1 )
								.betweenMemberTypeDeclarations ( 1 )
								.betweenFieldDeclarations ( 0 )
								.betweenAbstractMethodDeclarations ( 1 )
								.betweenMethodAndConstructorDeclarations ( 1 )
								.build ( ) )
						.withinMethodOrConstructorDeclarations ( BlankLinesWithinMethodOrConstructorDeclarations.builder ( )
								.atBeginningOfBody ( 0 )
								.atEndOfBody ( 0 )
								.atBeginningOfCodeBlock ( 0 )
								.atEndOfCodeBlock ( 0 )
								.beforeStatementWithCodeBlock ( 0 )
								.afterStatementWithCodeBlock ( 0 )
								.betweenStatementGroupsInSwitch ( 0 )
								.build ( ) )
						.build ( ) )
				.newLines ( NewLines.builder ( )
						.beforeEmptyStatement ( true )
						.afterOpeningBraceOfArrayInitializer ( false )
						.beforeClosingBraceOfArrayInitializer ( false )
						.atEndOfFile ( false )
						.controlStatement ( NewLinesControlStatement.builder ( )
								.afterLabels ( true )
								.ifElseStatement ( NewLinesIfElseStatement.builder ( )
										.beforeElse ( false )
										.keepThenOnSameLine ( false )
										.keepSimpleIfOnOneLine ( false )
										.keepElseOnSameLine ( false )
										.keepElseIfOnOneLine ( true )
										.build ( ) )
								.loopStatement ( NewLinesLoopStatement.builder ( )
										.beforeWhileInDo ( false )
										.keepSimpleForOnOneLine ( false )
										.keepSimpleWhileOnOneLine ( false )
										.keepSimpleDoWhileOnOneLine ( false )
										.build ( ) )
								.tryBlock ( NewLinesTryBlock.builder ( )
										.beforeCatch ( false )
										.beforeFinally ( false )
										.build ( ) )
								.build ( ) )
						.afterAnnotation ( NewLinesAfterAnnotation.builder ( )
								.onPackage ( true )
								.onType ( true )
								.onEnumConstant ( true )
								.onField ( true )
								.onMethod ( true )
								.onLocalVariable ( true )
								.onParameter ( false )
								.typeAnnotation ( false )
								.build ( ) )
						.bracedCodeOnOneLine ( NewLinesBracedCodeOnOneLine.builder ( )
								.loopBody ( BracedCodeOnOneLineValue.Never )
								.ifThenStatementBody ( BracedCodeOnOneLineValue.Never )
								.keepReturnOrThrowOnOneLine ( false )
								.lambdaBody ( BracedCodeOnOneLineValue.Never )
								.switchCaseWithArrow ( BracedCodeOnOneLineValue.Never )
								.switchExpressionWithArrow ( BracedCodeOnOneLineValue.Never )
								.otherCodeBlocksInStatements ( BracedCodeOnOneLineValue.Never )
								.methodDeclaration ( BracedCodeOnOneLineValue.Never )
								.keepSimpleGettersAndSettersOnOneLine ( false )
								.classDeclaration ( BracedCodeOnOneLineValue.Never )
								.anonymousClassDeclaration ( BracedCodeOnOneLineValue.Never )
								.enumDeclaration ( BracedCodeOnOneLineValue.Never )
								.enumConstantDeclaration ( BracedCodeOnOneLineValue.Never )
								.recordDeclaration ( BracedCodeOnOneLineValue.Never )
								.recordConstructorDeclaration ( BracedCodeOnOneLineValue.Never )
								.annotationDeclaration ( BracedCodeOnOneLineValue.Never )
								.build ( ) )
						.build ( ) )
				.lineWrap ( LineWrap.builder ( )
						.maximumLineWidth ( 120 )
						.defaultIndentationForWrappedLines ( 2 )
						.defaultIndentationForArrayInitializers ( 2 )
						.neverJoinAlreadyWrappedLines ( false )
						.preferWrappingOuterExpressions ( true )
						.wrapSettings ( LineWrappingSettings.builder ( )
								.classDeclaration ( LineWrapClassDeclaration.builder ( )
										.extendsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.implementsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.permitsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.constructorDeclaration ( LineWrapConstructorDeclaration.builder ( )
										.parameters ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.throwsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.methodDeclaration ( LineWrapMethodDeclaration.builder ( )
										.declaration ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.parameters ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.throwsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.enumDeclaration ( LineWrapEnumDeclaration.builder ( )
										.constant ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.implementsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.constantArguments ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.recordDeclaration ( LineWrapRecordDeclaration.builder ( )
										.component ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.implementsClause ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.functionCall ( LineWrapFunctionCall.builder ( )
										.arguments ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.qualifiedInvocations ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.indentFromBaseExpressionFirstLine ( true )
										.explicitConstructorInvocation ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.objectAllocationArguments ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.qualifiedObjectAllocationArguments ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.binaryExpression ( LineWrapBinaryExpression.builder ( )
										.multiplicativeOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapWhereNecessary, false, DefaultIndentation ) )
										.additiveOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapWhereNecessary, false, DefaultIndentation ) )
										.stringOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapWhereNecessary, false, DefaultIndentation ) )
										.shiftOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.relationalOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.bitwiseOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapWhereNecessary, false, DefaultIndentation ) )
										.logicalOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.otherExpression ( LineWrapOtherExpression.builder ( )
										.conditionalOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapAllElementsIndentAllButFirstUnlessNecessary, false, DefaultIndentation ) )
										.chainedConditional ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.assignment ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.arrayInitializer ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.statement ( LineWrapStatement.builder ( )
										.forStatement ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.compactIfElse ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.compactLoop ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.tryWithResources ( new DeclarationWrapping ( WrapAllElementsIndentAllButFirstUnlessNecessary, false, DefaultIndentation ) )
										.multiCatch ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapAllElementsIndentAllButFirstUnlessNecessary, false, DefaultIndentation ) )
										.switchCaseWithArrow ( new InlineDeclarationWrapping ( WrapAfterOperators, WrapAllElementsIndentAllButFirstUnlessNecessary, false, DefaultIndentation ) )
										.expressionsInSwitchCaseWithArrow ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.expressionsInSwitchCaseWithColon ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.assertMessages ( new InlineDeclarationWrapping ( WrapBeforeOperators, WrapAllElementsIndentAllButFirstUnlessNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.parameterizedType ( LineWrapParameterizedType.builder ( )
										.reference ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.arguments ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.parameters ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.annotation ( LineWrapAnnotation.builder ( )
										.onPackage ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onType ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onEnumConstant ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onField ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onMethod ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onLocalVariable ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onParameters ( new AnnotationWrapping ( DoNotWrap, false ) )
										.typeAnnotation ( new AnnotationWrapping ( DoNotWrap, false ) )
										.elementValuePairs ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.moduleDescription ( LineWrapModuleDescription.builder ( )
										.statement ( new DeclarationWrapping ( WrapWhereNecessary, false, DefaultIndentation ) )
										.build ( ) )
								.build ( ) )
						.build ( ) )
				.comments ( Comments.builder ( )
						.maximumLineWidth ( 80 )
						.countWidthFromCommentStartingPosition ( true )
						.enableJavadocCommentFormatting ( true )
						.enableBlockCommentFormatting ( true )
						.enableLineCommentFormatting ( true )
						.formatLineCommentsOnFirstColumn ( false )
						.enableHeaderCommentFormatting ( false )
						.preserveWhitespaceBetweenCodeAndLineComments ( false )
						.neverIndentLineCommentsOnFirstColumn ( false )
						.neverIndentBlockCommentsOnFirstColumn ( false )
						.neverJoinLines ( false )
						.javadocs ( Javadocs.builder ( )
								.formatHtmlTags ( true )
								.doNotPutBlockTagsOnSeparateLines ( false )
								.formatJavaCodeSnippetsInPreTags ( true )
								.blankLinesBeforeJavadocTags ( true )
								.blankLinesBetweenTagsOfDifferentType ( false )
								.alignJavadocTagsInColumns ( AlignJavadocTagsInColumns.AlignDescriptionsGroupedByType )
								.newLineBeforeParam ( false )
								.newLineBeforeThrows ( false )
								.indentWrappedParam ( false )
								.indentWrappedThrows ( false )
								.indentOtherTagDescriptionsWhenWrapped ( false )
								.startAndStopTagsOnDifferentLines ( true )
								.removeBlankLines ( false )
								.build ( ) )
						.blockComment ( BlockComment.builder ( )
								.startAndStopTagsOnDifferentLines ( true )
								.removeBlankLines ( false )
								.build ( ) )
						.build ( ) )
				.build ( ) ;

		bill = StyleConfig.builder ( )
				.indentation ( IndentationConfig.builder ( )
						.type ( IndentationType.Tabs )
						.useSpacesToIndentWrappedLines ( false )
						.indentationSpacesCount ( 4 )
						.tabSize ( 4 )
						.textBlockIndentation ( TextBlockIndentation.DefaultForWrappedLines )
						.indentationElements ( IndentationElements.builder ( )
								.declarationWithinClassBody ( true )
								.declarationWithinEnumDeclaration ( true )
								.declarationWithinEnumConstants ( true )
								.declarationWithinAnnotationDeclaration ( true )
								.declarationWithinRecordDeclaration ( true )
								.statementWithinConstructorBody ( true )
								.statementWithinMethodBody ( true )
								.statementWithinBlock ( true )
								.breakWithinSwitchBody ( true )
								.statementWithinCaseBody ( true )
								.breakWithinSwitchBody ( true )
								.emptyLines ( false )
								.build ( ) )
						.alignmentInColumns ( AlignmentInColumns.builder ( )
								.fieldDeclarations ( false )
								.variableDeclarations ( false )
								.assignmentStatements ( false )
								.useSpacesForAlign ( false )
								.blankLinesSeparatingIndependentGroups ( 1 )
								.build ( ) )
						.build ( ) )
				.bracePosition ( BracePosition.builder ( )
						.classOrInterfaceDeclaration ( BracePositionValue.SameLine )
						.anonymousClassDeclaration ( BracePositionValue.SameLine )
						.constructorDeclaration ( BracePositionValue.SameLine )
						.methodDeclaration ( BracePositionValue.SameLine )
						.enumDeclaration ( BracePositionValue.SameLine )
						.enumConstantBody ( BracePositionValue.SameLine )
						.recordDeclaration ( BracePositionValue.SameLine )
						.recordConstructor ( BracePositionValue.SameLine )
						.annotationTypeDeclaration ( BracePositionValue.SameLine )
						.block ( BracePositionValue.SameLine )
						.blockInCaseStatement ( BracePositionValue.SameLine )
						.switchExpression ( BracePositionValue.SameLine )
						.switchStatement ( BracePositionValue.SameLine )
						.arrayExpression ( BracePositionValue.SameLine )
						.keepEmptyArrayInitializerOnOneLine ( false )
						.lambdaBody ( BracePositionValue.SameLine )
						.build ( ) )
				.parenthesesPosition ( ParenthesesPosition.builder ( )
						.methodDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.methodInvocation ( ParenthesesPositionValue.SameLineAsContent )
						.enumConstantDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.recordDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.annotation ( ParenthesesPositionValue.SameLineAsContent )
						.lambdaDeclaration ( ParenthesesPositionValue.SameLineAsContent )
						.ifStatement ( ParenthesesPositionValue.SameLineAsContent )
						.whileStatement ( ParenthesesPositionValue.SameLineAsContent )
						.doWhileStatement ( ParenthesesPositionValue.SameLineAsContent )
						.forStatement ( ParenthesesPositionValue.SameLineAsContent )
						.switchStatement ( ParenthesesPositionValue.SameLineAsContent )
						.tryClause ( ParenthesesPositionValue.SameLineAsContent )
						.catchClause ( ParenthesesPositionValue.SameLineAsContent )
						.build ( ) )
				.whitespace ( Whitespace.builder ( )
						.declaration ( WhitespaceDeclaration.builder ( )
								.classSpace ( ClassSpace.builder ( )
										.beforeOpeningBraceNamedClass ( true )
										.beforeOpeningBraceAnonymousClass ( true )
										.beforeCommaImplementsClause ( false )
										.afterCommaImplementsClause ( true )
										.beforeCommaPermitsClause ( false )
										.afterCommaPermitsClause ( true )
										.build ( ) )
								.fieldSpace ( FieldSpace.builder ( )
										.beforeCommaMultipleFields ( false )
										.afterCommaMultipleFields ( true )
										.build ( ) )
								.localVariableSpace ( LocalVariableSpace.builder ( )
										.beforeCommaMultipleFields ( false )
										.afterCommaMultipleFields ( true )
										.build ( ) )
								.constructorSpace ( ConstructorSpace.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.betweenEmptyParenthesis ( true )
										.beforeOpeningBrace ( true )
										.beforeCommaInParameters ( false )
										.afterCommaInParameters ( true )
										.beforeCommaInThrows ( false )
										.afterCommaInThrows ( true )
										.build ( ) )
								.methodSpace ( MethodSpace.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.betweenEmptyParenthesis ( true )
										.beforeOpeningBrace ( true )
										.beforeCommaInParameters ( false )
										.afterCommaInParameters ( true )
										.beforeEllipsesInVarargs ( true )
										.afterEllipsesInVarargs ( true )
										.beforeCommaInThrows ( false )
										.afterCommaInThrows ( true )
										.build ( ) )
								.labelSpace ( LabelSpace.builder ( )
										.beforeColon ( false )
										.afterColon ( true )
										.build ( ) )
								.annotationSpace ( AnnotationSpace.builder ( )
										.afterAt ( false )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.enumSpace ( EnumSpace.builder ( )
										.beforeOpeningBraceInDeclaration ( true )
										.beforeCommaBetweenConstants ( false )
										.afterCommaBetweenConstants ( true )
										.beforeOpeningParenthesisInConstantArguments ( true )
										.afterOpeningParenthesisInConstantArguments ( true )
										.betweenEmptyParenthesisInConstantArguments ( true )
										.beforeCommaInConstantArguments ( false )
										.afterCommaBetweenConstants ( true )
										.beforeClosingParenthesisInConstantArguments ( true )
										.beforeOpeningBraceOfConstantBody ( true )
										.build ( ) )
								.annotationTypeSpace ( AnnotationTypeSpace.builder ( )
										.beforeAt ( true )
										.afterAt ( false )
										.beforeOpeningBrace ( true )
										.beforeOpeningParenthesisInAnnotationTypeMembers ( true )
										.betweenParenthesisInAnnotationTypeMembers ( true )
										.build ( ) )
								.recordSpace ( RecordSpace.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeCommaInRecordComponents ( false )
										.afterCommaInRecordComponents ( true )
										.beforeClosingParenthesis ( true )
										.beforeOpeningBraceInDeclaration ( true )
										.beforeOpeningBraceInRecordConstructor ( true )
										.build ( ) )
								.lambdaSpace ( LambdaSpace.builder ( )
										.beforeArrowOperator ( true )
										.afterArrowOperator ( true )
										.build ( ) )
								.build ( ) )
						.controlStatement ( WhitespaceControlStatement.builder ( )
								.blockStatement ( WhitespaceBlockStatement.builder ( )
										.beforeOpeningBrace ( true )
										.afterClosingBrace ( true )
										.build ( ) )
								.ifElseStatement ( WhitespaceIfElseStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.forStatement ( WhitespaceForStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.beforeCommaInInitialization ( false )
										.afterCommaInInitialization ( true )
										.beforeCommaInIncrements ( false )
										.afterCommaInIncrements ( true )
										.beforeSemicolon ( true )
										.afterSemicolon ( true )
										.beforeColon ( true )
										.afterColon ( true )
										.build ( ) )
								.switchStatement ( WhitespaceSwitchStatement.builder ( )
										.beforeColonInCase ( false )
										.beforeColonInDefault ( false )
										.beforeArrowInCase ( true )
										.afterArrowInCase ( true )
										.beforeArrowInDefault ( true )
										.afterArrowInDefault ( true )
										.beforeCommaInCaseExpressions ( false )
										.afterCommaInCaseExpressions ( true )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.beforeOpeningBrace ( true )
										.build ( ) )
								.whileStatement ( WhitespaceWhileStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.doWhileStatement ( WhitespaceDoWhileStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.synchronizedStatement ( WhitespaceSynchronizedStatement.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.tryWithResourcesClause ( WhitespaceTryWithResourcesClause.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeSemicolon ( true )
										.afterSemicolon ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.catchClause ( WhitespaceCatchClause.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.assertStatement ( WhitespaceAssertStatement.builder ( )
										.beforeColon ( true )
										.afterColon ( true )
										.build ( ) )
								.returnStatement ( WhitespaceReturnStatement.builder ( )
										.beforeParenthesizedExpressions ( true )
										.build ( ) )
								.throwStatement ( WhitespaceThrowStatement.builder ( )
										.beforeParenthesizedExpressions ( true )
										.build ( ) )
								.beforeSemicolon ( true )
								.build ( ) )
						.expression ( WhitespaceExpression.builder ( )
								.functionInvocation ( WhitespaceFunctionInvocation.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.betweenEmptyParentheses ( true )
										.beforeCommaInMethodArguments ( false )
										.afterCommaInMethodArguments ( true )
										.beforeCommaInObjectAllocationArguments ( false )
										.afterCommaInObjectAllocationArguments ( true )
										.beforeCommaInExplicitConstructorCall ( true )
										.afterCommaInExplicitConstructorCall ( true )
										.build ( ) )
								.unaryOperator ( WhitespaceUnaryOperator.builder ( )
										.beforePostfixOperator ( false )
										.afterPostfixOperator ( true )
										.beforePrefixOperator ( true )
										.afterPrefixOperator ( false )
										.beforeUnaryOperator ( true )
										.afterUnaryOperator ( false )
										.afterLogicalNotOperator ( true )
										.build ( ) )
								.binaryOperator ( WhitespaceBinaryOperator.builder ( )
										.beforeMultiplicativeOperator ( true )
										.afterMultiplicativeOperator ( true )
										.beforeAdditiveOperator ( true )
										.afterAdditiveOperator ( true )
										.beforeStringConcatenationOperator ( true )
										.afterStringConcatenationOperator ( true )
										.beforeShiftOperator ( true )
										.afterShiftOperator ( true )
										.beforeRelationalOperator ( true )
										.afterRelationalOperator ( true )
										.beforeBitwiseOperator ( true )
										.afterBitwiseOperator ( true )
										.beforeLogicalOperator ( true )
										.afterLogicalOperator ( true )
										.build ( ) )
								.conditionalOperator ( WhitespaceConditionalOperator.builder ( )
										.beforeQuestionMark ( true )
										.afterQuestionMark ( true )
										.beforeColon ( true )
										.afterColon ( true )
										.build ( ) )
								.assignmentOperator ( WhitespaceAssignmentOperator.builder ( )
										.beforeAssignmentOperator ( true )
										.afterAssignmentOperator ( true )
										.build ( ) )
								.parenthesizedExpression ( WhitespaceParenthesizedExpression.builder ( )
										.beforeOpeningParenthesis ( true )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.build ( ) )
								.typeCast ( WhitespaceTypeCast.builder ( )
										.afterOpeningParenthesis ( true )
										.beforeClosingParenthesis ( true )
										.afterClosingParenthesis ( true )
										.build ( ) )
								.build ( ) )
						.array ( WhitespaceArray.builder ( )
								.declaration ( WhitespaceArrayDeclaration.builder ( )
										.beforeOpeningBracket ( true )
										.betweenEmptyBrackets ( true )
										.build ( ) )
								.allocation ( WhitespaceArrayAllocation.builder ( )
										.beforeOpeningBracket ( true )
										.afterOpeningBracket ( true )
										.beforeClosingBracket ( true )
										.afterClosingBracket ( true )
										.build ( ) )
								.initializer ( WhitespaceArrayInitializer.builder ( )
										.beforeOpeningBrace ( true )
										.afterOpeningBrace ( true )
										.beforeClosingBrace ( true )
										.beforeComma ( false )
										.afterComma ( true )
										.betweenEmptyBraces ( true )
										.build ( ) )
								.access ( WhitespaceArrayAccess.builder ( )
										.beforeOpeningBracket ( true )
										.afterOpeningBracket ( true )
										.beforeClosingBracket ( true )
										.build ( ) )
								.build ( ) )
						.parameterizedType ( WhitespaceParameterizedType.builder ( )
								.reference ( WhitespaceParameterizedTypeReference.builder ( )
										.beforeOpeningAngleBracket ( true )
										.afterOpeningAngleBracket ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingAngleBracket ( false )
										.build ( ) )
								.arguments ( WhitespaceParameterizedTypeArguments.builder ( )
										.beforeOpeningAngleBracket ( false )
										.afterOpeningAngleBracket ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingAngleBracket ( false )
										.afterClosingAngleBracket ( false )
										.build ( ) )
								.parameters ( WhitespaceParameterizedTypeParameters.builder ( )
										.beforeOpeningAngleBracket ( true )
										.afterOpeningAngleBracket ( false )
										.beforeComma ( false )
										.afterComma ( true )
										.beforeClosingAngleBracket ( false )
										.afterClosingAngleBracket ( true )
										.beforeAndInTypeBounds ( true )
										.afterAndInTypeBounds ( true )
										.build ( ) )
								.wildcard ( WhitespaceParameterizedTypeWildcard.builder ( )
										.beforeQuestionMark ( false )
										.afterQuestionMark ( false )
										.build ( ) )
								.build ( ) )
						.build ( ) )
				.blankLines ( BlankLines.builder ( )
						.numberOfEmptyLinesToPreserve ( 1 )
						.withinCompilationUnit ( BlankLinesWithinCompilationUnit.builder ( )
								.beforePackage ( 0 )
								.afterPackage ( 1 )
								.beforeImports ( 1 )
								.betweenImportGroups ( 1 )
								.afterImports ( 1 )
								.betweenClassDeclarations ( 1 )
								.build ( ) )
						.withinTypeDeclarations ( BlankLinesWithinTypeDeclarations.builder ( )
								.beforeFirstMemberDeclaration ( 1 )
								.afterLastMemberDeclaration ( 0 )
								.betweenMembersDeclarationsOfDifferentKinds ( 1 )
								.betweenMemberTypeDeclarations ( 1 )
								.betweenFieldDeclarations ( 0 )
								.betweenAbstractMethodDeclarations ( 1 )
								.betweenMethodAndConstructorDeclarations ( 1 )
								.build ( ) )
						.withinMethodOrConstructorDeclarations ( BlankLinesWithinMethodOrConstructorDeclarations.builder ( )
								.atBeginningOfBody ( 0 )
								.atEndOfBody ( 0 )
								.atBeginningOfCodeBlock ( 0 )
								.atEndOfCodeBlock ( 0 )
								.beforeStatementWithCodeBlock ( 0 )
								.afterStatementWithCodeBlock ( 0 )
								.betweenStatementGroupsInSwitch ( 0 )
								.build ( ) )
						.build ( ) )
				.newLines ( NewLines.builder ( )
						.beforeEmptyStatement ( true )
						.afterOpeningBraceOfArrayInitializer ( false )
						.beforeClosingBraceOfArrayInitializer ( false )
						.atEndOfFile ( true )
						.controlStatement ( NewLinesControlStatement.builder ( )
								.afterLabels ( true )
								.ifElseStatement ( NewLinesIfElseStatement.builder ( )
										.beforeElse ( false )
										.keepThenOnSameLine ( false )
										.keepSimpleIfOnOneLine ( false )
										.keepElseOnSameLine ( false )
										.keepElseIfOnOneLine ( true )
										.build ( ) )
								.loopStatement ( NewLinesLoopStatement.builder ( )
										.beforeWhileInDo ( false )
										.keepSimpleForOnOneLine ( false )
										.keepSimpleWhileOnOneLine ( false )
										.keepSimpleDoWhileOnOneLine ( false )
										.build ( ) )
								.tryBlock ( NewLinesTryBlock.builder ( )
										.beforeCatch ( false )
										.beforeFinally ( false )
										.build ( ) )
								.build ( ) )
						.afterAnnotation ( NewLinesAfterAnnotation.builder ( )
								.onPackage ( true )
								.onType ( true )
								.onEnumConstant ( true )
								.onField ( true )
								.onMethod ( true )
								.onLocalVariable ( true )
								.onParameter ( false )
								.typeAnnotation ( false )
								.build ( ) )
						.bracedCodeOnOneLine ( NewLinesBracedCodeOnOneLine.builder ( )
								.loopBody ( BracedCodeOnOneLineValue.Never )
								.ifThenStatementBody ( BracedCodeOnOneLineValue.Never )
								.keepReturnOrThrowOnOneLine ( false )
								.lambdaBody ( BracedCodeOnOneLineValue.Never )
								.switchCaseWithArrow ( BracedCodeOnOneLineValue.Never )
								.switchExpressionWithArrow ( BracedCodeOnOneLineValue.Never )
								.otherCodeBlocksInStatements ( BracedCodeOnOneLineValue.IfEmpty )
								.methodDeclaration ( BracedCodeOnOneLineValue.Never )
								.keepSimpleGettersAndSettersOnOneLine ( false )
								.classDeclaration ( BracedCodeOnOneLineValue.Never )
								.anonymousClassDeclaration ( BracedCodeOnOneLineValue.Never )
								.enumDeclaration ( BracedCodeOnOneLineValue.Never )
								.enumConstantDeclaration ( BracedCodeOnOneLineValue.Never )
								.recordDeclaration ( BracedCodeOnOneLineValue.Never )
								.recordConstructorDeclaration ( BracedCodeOnOneLineValue.Never )
								.annotationDeclaration ( BracedCodeOnOneLineValue.Never )
								.build ( ) )
						.build ( ) )
				.lineWrap ( LineWrap.builder ( )
						.maximumLineWidth ( 141 )
						.defaultIndentationForWrappedLines ( 2 )
						.defaultIndentationForArrayInitializers ( 2 )
						.neverJoinAlreadyWrappedLines ( false )
						.preferWrappingOuterExpressions ( true )
						.wrapSettings ( LineWrappingSettings.builder ( )
								.classDeclaration ( LineWrapClassDeclaration.builder ( )
										.extendsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.implementsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.permitsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.constructorDeclaration ( LineWrapConstructorDeclaration.builder ( )
										.parameters ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.throwsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.methodDeclaration ( LineWrapMethodDeclaration.builder ( )
										.declaration ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.parameters ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.throwsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.enumDeclaration ( LineWrapEnumDeclaration.builder ( )
										.constant ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.implementsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.constantArguments ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.recordDeclaration ( LineWrapRecordDeclaration.builder ( )
										.component ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.implementsClause ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.functionCall ( LineWrapFunctionCall.builder ( )
										.arguments ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.qualifiedInvocations ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.indentFromBaseExpressionFirstLine ( false )
										.explicitConstructorInvocation ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.objectAllocationArguments ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.qualifiedObjectAllocationArguments ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.binaryExpression ( LineWrapBinaryExpression.builder ( )
										.multiplicativeOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.additiveOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.stringOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.shiftOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.relationalOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.bitwiseOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.logicalOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.otherExpression ( LineWrapOtherExpression.builder ( )
										.conditionalOperator ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.chainedConditional ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.assignment ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.arrayInitializer ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.statement ( LineWrapStatement.builder ( )
										.forStatement ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.compactIfElse ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.compactLoop ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.tryWithResources ( new DeclarationWrapping ( WrapAllElementsEachOnePerLine, false, DefaultIndentation ) )
										.multiCatch ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.switchCaseWithArrow ( new InlineDeclarationWrapping ( WrapAfterOperators, DoNotWrap, false, DefaultIndentation ) )
										.expressionsInSwitchCaseWithArrow ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.expressionsInSwitchCaseWithColon ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.assertMessages ( new InlineDeclarationWrapping ( WrapBeforeOperators, DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.parameterizedType ( LineWrapParameterizedType.builder ( )
										.reference ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.arguments ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.parameters ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.annotation ( LineWrapAnnotation.builder ( )
										.onPackage ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onType ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onEnumConstant ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onField ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onMethod ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onLocalVariable ( new AnnotationWrapping ( WrapAllElementsEachOnePerLine, false ) )
										.onParameters ( new AnnotationWrapping ( DoNotWrap, false ) )
										.typeAnnotation ( new AnnotationWrapping ( DoNotWrap, false ) )
										.elementValuePairs ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.moduleDescription ( LineWrapModuleDescription.builder ( )
										.statement ( new DeclarationWrapping ( DoNotWrap, false, DefaultIndentation ) )
										.build ( ) )
								.build ( ) )
						.build ( ) )
				.comments ( Comments.builder ( )
						.maximumLineWidth ( 120 )
						.countWidthFromCommentStartingPosition ( true )
						.enableJavadocCommentFormatting ( true )
						.enableBlockCommentFormatting ( true )
						.enableLineCommentFormatting ( true )
						.formatLineCommentsOnFirstColumn ( false )
						.enableHeaderCommentFormatting ( false )
						.preserveWhitespaceBetweenCodeAndLineComments ( false )
						.neverIndentLineCommentsOnFirstColumn ( false )
						.neverIndentBlockCommentsOnFirstColumn ( false )
						.neverJoinLines ( false )
						.javadocs ( Javadocs.builder ( )
								.formatHtmlTags ( true )
								.doNotPutBlockTagsOnSeparateLines ( false )
								.formatJavaCodeSnippetsInPreTags ( true )
								.blankLinesBeforeJavadocTags ( true )
								.blankLinesBetweenTagsOfDifferentType ( false )
								.alignJavadocTagsInColumns ( AlignJavadocTagsInColumns.AlignDescriptionsGroupedByType )
								.newLineBeforeParam ( false )
								.newLineBeforeThrows ( false )
								.indentWrappedParam ( false )
								.indentWrappedThrows ( false )
								.indentOtherTagDescriptionsWhenWrapped ( false )
								.startAndStopTagsOnDifferentLines ( true )
								.removeBlankLines ( false )
								.build ( ) )
						.blockComment ( BlockComment.builder ( )
								.startAndStopTagsOnDifferentLines ( true )
								.removeBlankLines ( false )
								.build ( ) )
						.build ( ) )
				.build ( ) ;

		defaultStyle = bill ;
	}
}
